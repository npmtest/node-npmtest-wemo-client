{"/home/travis/build/npmtest/node-npmtest-wemo-client/test.js":"/* istanbul instrument in package npmtest_wemo_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wemo-client/lib.npmtest_wemo_client.js":"/* istanbul instrument in package npmtest_wemo_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wemo_client = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wemo_client = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wemo-client/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wemo-client && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wemo_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wemo_client\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wemo_client.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wemo_client.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wemo_client.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wemo_client.__dirname + '/lib.npmtest_wemo_client.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wemo-client/node_modules/wemo-client/index.js":"var SSDPClient = require('node-ssdp').Client;\nvar url = require('url');\nvar http = require('http');\nvar os = require('os');\nvar debug = require('debug')('wemo-client');\n\nvar WemoClient = require('./client');\n\nvar Wemo = module.exports = function(opts) {\n  opts = opts || {};\n  this._port = opts.port || 0;\n\n  this._clients = {};\n  this._listen();\n  this._ssdpClient = new SSDPClient(opts.discover_opts || {});\n};\n\nWemo.DEVICE_TYPE = {\n  Bridge: 'urn:Belkin:device:bridge:1',\n  Switch: 'urn:Belkin:device:controllee:1',\n  Motion: 'urn:Belkin:device:sensor:1',\n  Maker: 'urn:Belkin:device:Maker:1',\n  Insight: 'urn:Belkin:device:insight:1',\n  LightSwitch: 'urn:Belkin:device:lightswitch:1'\n};\n\nWemo.prototype.load = function(setupUrl, cb) {\n  var self = this;\n  var location = url.parse(setupUrl);\n\n  WemoClient.request({\n    host: location.hostname,\n    port: location.port,\n    path: location.path,\n    method: 'GET'\n  }, function(err, json) {\n    if (!err && json) {\n      var device = json.root.device;\n      device.host = location.hostname;\n      device.port = location.port;\n      device.callbackURL = self.getCallbackURL();\n\n      // Return devices only once!\n      if (!self._clients[device.UDN] || self._clients[device.UDN].error) {\n        debug('Found device: %j', json);\n        if (cb) {\n          cb.call(self, device);\n        }\n      }\n    }\n  });\n};\n\nWemo.prototype.discover = function(cb) {\n  var self = this;\n  var handleResponse = function(msg, statusCode, rinfo) {\n    if (msg.ST && msg.ST === 'urn:Belkin:service:basicevent:1') {\n      self.load(msg.LOCATION, cb);\n    }\n  };\n\n  this._ssdpClient.removeAllListeners('response');\n  this._ssdpClient.on('response', handleResponse);\n  this._ssdpClient.search('urn:Belkin:service:basicevent:1');\n};\n\nWemo.prototype._listen = function() {\n  this._server = http.createServer(this._handleRequest.bind(this));\n  this._server.listen(this._port, function(err) {\n    if (err) {\n      throw err;\n    }\n  });\n};\n\nWemo.prototype._handleRequest = function(req, res) {\n  var body = '';\n  var udn = req.url.substring(1);\n\n  if ((req.method == 'NOTIFY') && this._clients[udn]) {\n    req.on('data', function(chunk) {\n      body += chunk.toString();\n    });\n    req.on('end', function() {\n      debug('Incoming Request for %s: %s', udn, body);\n      this._clients[udn].handleCallback(body);\n      res.writeHead(204);\n      res.end();\n    }.bind(this));\n  } else {\n    debug('Received request for unknown device: %s', udn);\n    res.writeHead(404);\n    res.end();\n  }\n};\n\nWemo.prototype.getCallbackURL = function() {\n  var getLocalInterfaceAddress = function() {\n    var interfaces = os.networkInterfaces();\n    var addresses = [];\n    for (var k in interfaces) {\n      for (var k2 in interfaces[k]) {\n        var address = interfaces[k][k2];\n        if (address.family === 'IPv4' && !address.internal) {\n          addresses.push(address.address);\n        }\n      }\n    }\n    return addresses.shift();\n  };\n\n  if (!this._callbackURL) {\n    var port = this._server.address().port;\n    var host = getLocalInterfaceAddress();\n    this._callbackURL = 'http://' + host + ':' + port;\n  }\n  return this._callbackURL;\n};\n\nWemo.prototype.client = function(device) {\n  if (this._clients[device.UDN] && !this._clients[device.UDN].error) {\n    return this._clients[device.UDN];\n  }\n\n  var client = this._clients[device.UDN] = new WemoClient(device);\n  return client;\n};\n","/home/travis/build/npmtest/node-npmtest-wemo-client/node_modules/wemo-client/client.js":"var util = require('util');\nvar http = require('http');\nvar xml2js = require('xml2js');\nvar entities = require('entities');\nvar EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('wemo-client');\nvar xmlbuilder = require('xmlbuilder');\n\nfunction mapCapabilities(capabilityIds, capabilityValues) {\n  var ids = capabilityIds.split(',');\n  var values = capabilityValues.split(',');\n  var result = {};\n  ids.forEach(function(val, index) {\n    result[val] = values[index];\n  });\n  return result;\n}\n\nvar WemoClient = module.exports = function(config) {\n  EventEmitter.call(this);\n  this.host = config.host;\n  this.port = config.port;\n  this.deviceType = config.deviceType;\n  this.UDN = config.UDN;\n  this.subscriptions = {};\n  this.callbackURL = config.callbackURL;\n  this.device = config;\n  this.error = undefined;\n\n  // Create map of services\n  config.serviceList.service.forEach(function(service) {\n    this[service.serviceType] = {\n      serviceId: service.serviceId,\n      controlURL: service.controlURL,\n      eventSubURL: service.eventSubURL\n    };\n  }, this.services = {});\n\n  // Transparently subscribe to serviceType events\n  // TODO: Unsubscribe from ServiceType when all listeners have been removed.\n  this.on('newListener', this._onListenerAdded);\n};\n\nutil.inherits(WemoClient, EventEmitter);\n\nWemoClient.EventServices = {\n  insightParams: 'urn:Belkin:service:insight:1',\n  statusChange: 'urn:Belkin:service:bridge:1',\n  attributeList: 'urn:Belkin:service:basicevent:1',\n  binaryState: 'urn:Belkin:service:basicevent:1'\n};\n\nWemoClient.request = function(options, data, cb) {\n  if (!cb && typeof data === 'function') {\n    cb = data;\n    data = null;\n  }\n\n  var req = http.request(options, function(res) {\n    var body = '';\n    res.setEncoding('utf8');\n    res.on('data', function(chunk) {\n      body += chunk;\n    });\n    res.on('end', function() {\n      if (res.statusCode === 200) {\n        xml2js.parseString(body, { explicitArray: false }, cb);\n      } else {\n        cb(new Error('HTTP ' + res.statusCode + ': ' + body));\n      }\n    });\n    res.on('error', function(err) {\n      debug('Error on http.request.res:', err);\n      cb(err);\n    });\n  });\n  req.on('error', function(err) {\n    debug('Error on http.request.req:', err);\n    cb(err);\n  });\n  if (data) {\n    req.write(data);\n  }\n  req.end();\n};\n\nWemoClient.prototype.soapAction = function(serviceType, action, body, cb) {\n  cb = cb || function() {};\n\n  var xml = xmlbuilder.create('s:Envelope', {\n    version: '1.0',\n    encoding: 'utf-8',\n    allowEmpty: true\n  })\n  .att('xmlns:s', 'http://schemas.xmlsoap.org/soap/envelope/')\n  .att('s:encodingStyle', 'http://schemas.xmlsoap.org/soap/encoding/')\n  .ele('s:Body')\n  .ele('u:' + action)\n  .att('xmlns:u', serviceType);\n\n  var payload = (body ? xml.ele(body) : xml).end();\n\n  var options = {\n    host: this.host,\n    port: this.port,\n    path: this.services[serviceType].controlURL,\n    method: 'POST',\n    headers: {\n      'SOAPACTION': '\"' + serviceType + '#' + action + '\"',\n      'Content-Type': 'text/xml; charset=\"utf-8\"'\n    }\n  };\n\n  WemoClient.request(options, payload, function(err, response) {\n    if (err) {\n      this.error = err.code;\n      this.emit('error', err);\n      return cb(err);\n    }\n    debug('%s Response: ', action, response);\n    cb(null, response && response['s:Envelope']['s:Body']['u:' + action + 'Response']);\n  }.bind(this));\n};\n\nWemoClient.prototype.getEndDevices = function(cb) {\n  var parseDeviceInfo = function(data) {\n    var device = {};\n\n    if (data.GroupID) {\n      // treat device group as it was a single device\n      device.friendlyName = data.GroupName[0];\n      device.deviceId = data.GroupID[0];\n      device.capabilities = mapCapabilities(\n        data.GroupCapabilityIDs[0],\n        data.GroupCapabilityValues[0]\n      );\n    } else {\n      // single device\n      device.friendlyName = data.FriendlyName[0];\n      device.deviceId = data.DeviceID[0];\n      device.capabilities = mapCapabilities(\n        data.CapabilityIDs[0],\n        data.CurrentState[0]\n      );\n    }\n\n    // set device type\n    if (device.capabilities.hasOwnProperty('10008')) {\n      device.deviceType = 'dimmableLight';\n    }\n    if (device.capabilities.hasOwnProperty('10300')) {\n      device.deviceType = 'colorLight';\n    }\n\n    return device;\n  };\n\n  var parseResponse = function(err, data) {\n    if (err) return cb(err);\n    debug('endDevices raw data', data);\n    var endDevices = [];\n    xml2js.parseString(data.DeviceLists, function(err, result) {\n      if (err) return cb(err);\n      var deviceInfos = result.DeviceLists.DeviceList[0].DeviceInfos[0].DeviceInfo;\n      if (deviceInfos) {\n        Array.prototype.push.apply(endDevices, deviceInfos.map(parseDeviceInfo));\n      }\n      if (result.DeviceLists.DeviceList[0].GroupInfos) {\n        var groupInfos = result.DeviceLists.DeviceList[0].GroupInfos[0].GroupInfo;\n        Array.prototype.push.apply(endDevices, groupInfos.map(parseDeviceInfo));\n      }\n      cb(null, endDevices);\n    });\n  };\n\n  this.soapAction('urn:Belkin:service:bridge:1', 'GetEndDevices', {\n    DevUDN: this.UDN,\n    ReqListType: 'PAIRED_LIST'\n  }, parseResponse);\n};\n\nWemoClient.prototype.setDeviceStatus = function(deviceId, capability, value, cb) {\n  var deviceStatusList = xmlbuilder.create('DeviceStatus', {\n    version: '1.0',\n    encoding: 'utf-8'\n  }).ele({\n    IsGroupAction: (deviceId.length === 10) ? 'YES' : 'NO',\n    DeviceID: deviceId,\n    CapabilityID: capability,\n    CapabilityValue: value\n  }).end();\n\n  this.soapAction('urn:Belkin:service:bridge:1', 'SetDeviceStatus', {\n    DeviceStatusList: {\n      '#text': deviceStatusList\n    }\n  }, cb);\n};\n\nWemoClient.prototype.getDeviceStatus = function(deviceId, cb) {\n  var parseResponse = function(err, data) {\n    if (err) return cb(err);\n    xml2js.parseString(data.DeviceStatusList, { explicitArray: false }, function(err, result) {\n      if (err) return cb(err);\n      var deviceStatus = result['DeviceStatusList']['DeviceStatus'];\n      var capabilities = mapCapabilities(deviceStatus.CapabilityID, deviceStatus.CapabilityValue);\n      cb(null, capabilities);\n    });\n  };\n\n  this.soapAction('urn:Belkin:service:bridge:1', 'GetDeviceStatus', {\n    DeviceIDs: deviceId\n  }, parseResponse);\n};\n\nWemoClient.prototype.setLightColor = function(deviceId, red, green, blue, cb) {\n  var color = WemoClient.rgb2xy(red, green, blue);\n  this.setDeviceStatus(deviceId, 10300, color.join(':') + ':0', cb);\n};\n\nWemoClient.prototype.setBinaryState = function(value, cb) {\n  this.soapAction('urn:Belkin:service:basicevent:1', 'SetBinaryState', {\n    BinaryState: value\n  }, cb);\n};\n\nWemoClient.prototype.getBinaryState = function(cb) {\n  this.soapAction('urn:Belkin:service:basicevent:1', 'GetBinaryState', null, function(err, data) {\n    if (err) return cb(err);\n    cb(null, data.BinaryState);\n  });\n};\n\nWemoClient.prototype.getAttributes = function(cb) {\n  this.soapAction('urn:Belkin:service:deviceevent:1', 'GetAttributes', null, function(err, data) {\n    if (err) return cb(err);\n    var xml = '<attributeList>' + entities.decodeXML(data.attributeList) + '</attributeList>';\n    xml2js.parseString(xml, { explicitArray: false }, function(err, result) {\n      if (err) return cb(err);\n      var attributes = {};\n      for (var key in result.attributeList.attribute) {\n        var attribute = result.attributeList.attribute[key];\n        attributes[attribute.name] = attribute.value;\n      }\n      cb(null, attributes);\n    });\n  });\n};\n\nWemoClient.prototype.getInsightParams = function(cb) {\n  this.soapAction('urn:Belkin:service:insight:1', 'GetInsightParams', null, function(err, data) {\n    if (err) return cb(err);\n\n    var params = this._parseInsightParams(data.InsightParams);\n    cb(null, params.binaryState, params.instantPower, params.insightParams);\n  }.bind(this));\n};\n\nWemoClient.prototype._parseInsightParams = function(paramsStr) {\n  var params = paramsStr.split('|');\n\n  return {\n    binaryState: params[0],\n    instantPower: params[7],\n    insightParams: {\n      ONSince: params[1],\n      OnFor: params[2],\n      TodayONTime: params[3],\n      TodayConsumed: params[8]  // power consumer today (mW per minute)\n    }\n  };\n};\n\nWemoClient.prototype._onListenerAdded = function(eventName) {\n  var serviceType = WemoClient.EventServices[eventName];\n  if (serviceType && this.services[serviceType]) {\n    this._subscribe(serviceType);\n  }\n};\n\nWemoClient.prototype._subscribe = function(serviceType) {\n  if (!this.services[serviceType]) {\n    throw new Error('Service ' + serviceType + ' not supported by ' + this.UDN);\n  }\n  if (!this.callbackURL) {\n    throw new Error('Can not subscribe without callbackURL');\n  }\n  if (this.subscriptions[serviceType] && this.subscriptions[serviceType] === 'PENDING') {\n    debug('subscription still pending');\n    return;\n  }\n\n  var options = {\n    host: this.host,\n    port: this.port,\n    path: this.services[serviceType].eventSubURL,\n    method: 'SUBSCRIBE',\n    headers: {\n      TIMEOUT: 'Second-300'\n    }\n  };\n\n  if (!this.subscriptions[serviceType]) {\n    // Initial subscription\n    this.subscriptions[serviceType] = 'PENDING';\n    debug('Initial subscription - Device: %s, Service: %s', this.UDN, serviceType);\n    options.headers.CALLBACK = '<' + this.callbackURL + '/' + this.UDN + '>';\n    options.headers.NT = 'upnp:event';\n  } else {\n    // Subscription renewal\n    debug('Renewing subscription - Device: %s, Service: %s', this.UDN, serviceType);\n    options.headers.SID = this.subscriptions[serviceType];\n  }\n\n  var req = http.request(options, function(res) {\n    if (res.statusCode === 200) {\n      // Renew after 150 seconds\n      this.subscriptions[serviceType] = res.headers.sid;\n      setTimeout(this._subscribe.bind(this), 150 * 1000, serviceType);\n    } else {\n      // Try to recover from failed subscription after 2 seconds\n      debug('Subscription request failed with HTTP %s', res.statusCode);\n      this.subscriptions[serviceType] = null;\n      setTimeout(this._subscribe.bind(this), 2000, serviceType);\n    }\n  }.bind(this));\n\n  req.on('error', function(err) {\n    debug('Subscription error: %s - Device: %s, Service: %s', err.code, this.UDN, serviceType);\n    this.subscriptions[serviceType] = null;\n    this.error = err.code;\n    this.emit('error', err);\n  }.bind(this));\n\n  req.end();\n};\n\nWemoClient.prototype.handleCallback = function(body) {\n  var self = this;\n  var handler = {\n    BinaryState: function(data) {\n      self.emit('binaryState', data.substring(0, 1));\n    },\n    StatusChange: function(data) {\n      xml2js.parseString(data, { explicitArray: false }, function(err, xml) {\n        if (!err) {\n          self.emit('statusChange',\n            xml.StateEvent.DeviceID._,\n            xml.StateEvent.CapabilityId,\n            xml.StateEvent.Value\n          );\n        }\n      });\n    },\n    InsightParams: function(data) {\n      var params = this._parseInsightParams(data);\n      self.emit('insightParams', params.binaryState, params.instantPower, params.insightParams);\n    }.bind(this),\n    attributeList: function(data) {\n      var xml = '<attributeList>' + entities.decodeXML(data) + '</attributeList>';\n      xml2js.parseString(xml, { explicitArray: true }, function(err, result) {\n        if (!err) {\n          // In order to keep the existing event signature this\n          // triggers an event for every attribute changed.\n          result.attributeList.attribute.forEach(function(attribute) {\n            self.emit('attributeList',\n              attribute.name[0],\n              attribute.value[0],\n              attribute.prevalue[0],\n              attribute.ts[0]\n            );\n          });\n        }\n      });\n    }\n  };\n\n  xml2js.parseString(body, { explicitArray: false }, function(err, xml) {\n    if (err) throw err;\n    for (var prop in xml['e:propertyset']['e:property']) {\n      if (handler.hasOwnProperty(prop)) {\n        handler[prop](xml['e:propertyset']['e:property'][prop]);\n      } else {\n        debug('Unhandled Event: %s', prop);\n      }\n    }\n  });\n};\n\nWemoClient.rgb2xy = function(r, g, b) {\n  // Based on: https://github.com/aleroddepaz/pyhue/blob/master/src/pyhue.py\n  var X = (0.545053 * r) + (0.357580 * g) + (0.180423 * b);\n  var Y = (0.212671 * r) + (0.715160 * g) + (0.072169 * b);\n  var Z = (0.019334 * r) + (0.119193 * g) + (0.950227 * b);\n\n  var x = X / (X + Y + Z);\n  var y = Y / (X + Y + Z);\n\n  return [\n    Math.round(x * 65535),\n    Math.round(y * 65535)\n  ];\n};\n"}